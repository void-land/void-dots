#!/bin/bash

# Advanced DoH (DNS over HTTPS) Testing Script
# This script tests multiple DoH providers by first resolving their IPs
# then querying them for AAAA records of example.com

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# DoH providers list (hostname:path format)
DOH_PROVIDERS=(
	"dns.google.com:/resolve"
	"cloudflare-dns.com:/dns-query"
	"1.1.1.1:/dns-query"
	"dns9.quad9.net:/dns-query"
	"dns10.quad9.net:/dns-query"
	"dns.quad9.net:/dns-query"
	"doh.cleanbrowsing.org:/doh/family-filter/dns-query"
	"dns.dnsoverhttps.net:/dns-query"
	"doh.crypto.sx:/dns-query"
	"doh.powerdns.org:/dns-query"
	"doh.securedns.eu:/dns-query"
	"doh.ibr.cs.tu-bs.de:/dns-query"
	"doh.eieidns.com:/dns-query"
	"doh.blahdns.com:/dns-query"
	"doh.de.blahdns.com:/dns-query"
	"doh.defaultroutes.de:/dns-query"
	"doh.bugdns.com:/dns-query"
	"doh.datt.pw:/dns-query"
	"doh.ntu.ssooss.win:/dns-query"
	"dns.dns-over-https.com:/dns-query"
	"dns.rubyfish.cn:/dns-query"
	"doh.qis.io:/dns-query"
	"public.dns.iij.jp:/dns-query"
	"dns.nextdns.io:/dns-query"
)

# Query parameters
TIMEOUT=3
MAX_RETRIES=1
QUERY_NAME="${1:-youtube.com}"
QUERY_TYPE="${2:-AAAA}"

BOOTSTRAP_DNS="8.8.8.8"

# Function to resolve hostname to IP using dig
resolve_hostname() {
	local hostname="$1"
	local ip

	echo -e "${BLUE}[INFO]${NC} Resolving $hostname..."

	# Try to resolve using dig with Google DNS
	if command -v dig >/dev/null 2>&1; then
		ip=$(dig @8.8.8.8 +short "$hostname" A | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)

		if [[ -n "$ip" ]]; then
			echo -e "${GREEN}[SUCCESS]${NC} $hostname resolved to $ip"

			echo "$ip"
			return 0
		fi

		# # Try with Cloudflare DNS as fallback
		# ip=$(dig @1.1.1.1 +short "$hostname" A | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)

		# if [[ -n "$ip" ]]; then
		# 	echo -e "${GREEN}[SUCCESS]${NC} $hostname resolved to $ip (via Cloudflare)"

		# 	echo "$ip"
		# 	return 0
		# fi
	fi

	# Fallback to nslookup if dig fails
	if command -v nslookup >/dev/null 2>&1; then
		ip=$(nslookup "$hostname" 8.8.8.8 2>/dev/null | awk '/^Address: / && !/8\.8\.8\.8/ { print $2 }' | head -n1)

		if [[ -n "$ip" && "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
			echo -e "${GREEN}[SUCCESS]${NC} $hostname resolved to $ip (via nslookup)"

			echo "$ip"
			return 0
		fi
	fi

	# If resolution fails, return the original hostname
	echo -e "${YELLOW}[WARNING]${NC} Could not resolve $hostname, using hostname directly"
	echo "$hostname"
	return 1
}

# Function to test DoH provider with retries
test_doh_provider() {
	local provider="$1"
	local hostname="${provider%:*}"
	local path="${provider#*:}"
	local ip_or_host
	local url
	local response
	local attempt

	echo -e "\n${BLUE}===== TESTING: $hostname =====${NC}"

	# Resolve hostname to IP
	ip_or_host=$(resolve_hostname "$hostname")

	# Construct URL and headers
	if [[ "$ip_or_host" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
		url="https://$ip_or_host$path?name=$QUERY_NAME&type=$QUERY_TYPE"
		host_header="-H \"Host: $hostname\""
		echo -e "${BLUE}[INFO]${NC} Testing with IP: $ip_or_host (Host: $hostname)"
	else
		url="https://$hostname$path?name=$QUERY_NAME&type=$QUERY_TYPE"
		host_header=""
		echo -e "${BLUE}[INFO]${NC} Testing with hostname: $hostname"
	fi

	echo -e "${BLUE}[INFO]${NC} Querying $QUERY_NAME ($QUERY_TYPE record)..."

	# Attempt the request with retries
	for ((attempt = 1; attempt <= MAX_RETRIES; attempt++)); do
		echo -e "${BLUE}[INFO]${NC} Attempt $attempt/$MAX_RETRIES..."

		# Make the request
		if [[ -n "$host_header" ]]; then
			response=$(eval curl -k -s -w \"\\n%{http_code}\\n%{time_total}\\n%{time_connect}\" \
				-H \"accept: application/dns-json\" \
				-H \"User-Agent: DoH-Tester/2.0\" \
				$host_header \
				--connect-timeout \"$TIMEOUT\" \
				--max-time \"$((TIMEOUT * 2))\" \
				\"$url\" 2>/dev/null)
		else
			response=$(curl -k -s -w "\n%{http_code}\n%{time_total}\n%{time_connect}" \
				-H "accept: application/dns-json" \
				-H "User-Agent: DoH-Tester/2.0" \
				--connect-timeout "$TIMEOUT" \
				--max-time "$((TIMEOUT * 2))" \
				"$url" 2>/dev/null)
		fi

		# Parse response
		if [[ -n "$response" ]]; then
			local json_part=$(echo "$response" | head -n -3)
			local http_code=$(echo "$response" | tail -n 3 | head -n 1)
			local time_total=$(echo "$response" | tail -n 2 | head -n 1)
			local time_connect=$(echo "$response" | tail -n 1)

			if [[ "$http_code" == "200" ]]; then
				echo -e "${GREEN}[SUCCESS]${NC} HTTP $http_code"
				echo -e "${GREEN}[TIMING]${NC} Connect: ${time_connect}s | Total: ${time_total}s"
				echo -e "${GREEN}[RESPONSE]${NC}"

				echo -e "$json_part" | jq

				echo -e "${BLUE}===== END: $hostname (SUCCESS) =====${NC}"
				return 0
			else
				echo -e "${RED}[ERROR]${NC} HTTP $http_code - Connect: ${time_connect}s | Total: ${time_total}s"
				if [[ -n "$json_part" ]]; then
					echo -e "${RED}[ERROR RESPONSE]${NC}"
					echo "$json_part"
				fi
			fi
		else
			echo -e "${RED}[ERROR]${NC} No response received (timeout or connection failed)"
		fi

		# Wait before retry (except last attempt)
		if [[ $attempt -lt $MAX_RETRIES ]]; then
			echo -e "${YELLOW}[INFO]${NC} Retrying in 2 seconds..."
			sleep 2
		fi
	done

	echo -e "${BLUE}===== END: $hostname (FAILED) =====${NC}"
	return 1
}

# Function to check prerequisites
check_prerequisites() {
	echo -e "${BLUE}[INFO]${NC} Checking for required tools..."
	local missing_tools=()

	if ! command -v curl >/dev/null 2>&1; then
		missing_tools+=("curl")
	fi

	if ! command -v dig >/dev/null 2>&1 && ! command -v nslookup >/dev/null 2>&1; then
		missing_tools+=("dig or nslookup")
	fi

	if [[ ${#missing_tools[@]} -gt 0 ]]; then
		echo -e "${RED}[ERROR]${NC} Missing required tools: ${missing_tools[*]}"
		echo -e "${RED}[ERROR]${NC} Please install the missing tools and try again."
		exit 1
	fi

	echo -e "${GREEN}[SUCCESS]${NC} All required tools are available"

	# Check for optional tools
	if command -v jq >/dev/null 2>&1; then
		echo -e "${GREEN}[INFO]${NC} jq found - JSON output will be formatted"
	else
		echo -e "${YELLOW}[INFO]${NC} jq not found - JSON output will be raw"
	fi
	echo
}

# Function to display usage
show_usage() {
	echo -e "${GREEN}Advanced DoH (DNS over HTTPS) Testing Script${NC}"
	echo -e "${GREEN}=============================================${NC}"
	echo
	echo "Usage: $0 [domain] [record_type]"
	echo
	echo "Parameters:"
	echo "  domain      - Domain to query (default: example.com)"
	echo "  record_type - DNS record type (default: AAAA)"
	echo
	echo "Examples:"
	echo "  $0                    # Query example.com AAAA records"
	echo "  $0 google.com A       # Query google.com A records"
	echo "  $0 cloudflare.com MX  # Query cloudflare.com MX records"
	echo
	echo "Supported record types: A, AAAA, CNAME, MX, TXT, NS, etc."
	echo
}

# Main execution function
main() {
	# Show usage if help requested
	if [[ "$1" == "-h" || "$1" == "--help" ]]; then
		show_usage
		exit 0
	fi

	echo -e "${GREEN}Advanced DoH (DNS over HTTPS) Testing Script${NC}"
	echo -e "${GREEN}=============================================${NC}"
	echo -e "Query: ${YELLOW}$QUERY_NAME${NC} (${YELLOW}$QUERY_TYPE${NC} record)"
	echo -e "Timeout: ${YELLOW}${TIMEOUT}s${NC} | Max retries: ${YELLOW}${MAX_RETRIES}${NC}"
	echo -e "Total providers: ${YELLOW}${#DOH_PROVIDERS[@]}${NC}"
	echo -e "Timestamp: ${YELLOW}$(date)${NC}\n"

	# Check prerequisites
	check_prerequisites

	# Test each DoH provider
	local success_count=0
	local total_count=${#DOH_PROVIDERS[@]}
	local start_time=$(date +%s)

	declare -a working_doh

	# Replace provider loop in main() with this inside the for-loop after each successful response:
	for provider in "${DOH_PROVIDERS[@]}"; do
		if test_doh_provider "$provider"; then
			((success_count++))
			# Add working DoH endpoint to the list
			hostname="${provider%:*}"
			path="${provider#*:}"
			ip_or_host=$(resolve_hostname "$hostname")
			if [[ "$ip_or_host" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then
				url="https://$ip_or_host$path"
			else
				url="https://$hostname$path"
			fi
			working_doh+=("$url")
		fi
		sleep 0.5
	done

	local end_time=$(date +%s)
	local total_time=$((end_time - start_time))

	# Summary
	echo -e "\n${GREEN}=============================================${NC}"
	echo -e "${GREEN}Testing Summary${NC}"
	echo -e "${GREEN}=============================================${NC}"
	echo -e "Total providers tested: ${YELLOW}$total_count${NC}"
	echo -e "Successful responses: ${YELLOW}$success_count${NC}"
	echo -e "Failed responses: ${YELLOW}$((total_count - success_count))${NC}"
	echo -e "Success rate: ${YELLOW}$(((success_count * 100) / total_count))%${NC}"
	echo -e "Total testing time: ${YELLOW}${total_time}s${NC}"

	echo -e "\nWorking DoH endpoints:"
	for doh_url in "${working_doh[@]}"; do
		echo "- [$doh_url]($doh_url)"
	done

	if [[ $success_count -gt 0 ]]; then
		echo -e "\n${GREEN}[INFO]${NC} Testing completed successfully!"
		exit 0
	else
		echo -e "\n${RED}[WARNING]${NC} No providers responded successfully!"
		exit 1
	fi
}

# Run main function with all arguments
main "$@"
